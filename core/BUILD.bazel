load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//docs:stardoc.bzl", "generate")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "srcs",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)

# boilerplate for `bazel_tools`
bzl_library(
    name = "bazel_tools",
    srcs = [
        "@bazel_tools//tools:bzl_srcs",
    ],
)

# define Bazel library and its dependencies for generating documentation. considered
# in isolation we could immediately use
#
# generate(deps = [":srcs", <foreign dependencies> ], ...)
#
# but toolchain modules that import definitions from here require a target to
# declare as their dependency for their own documentation rendering. same for
# legacy documentation. one could possibly extract this highly repetitive
# pattern into `generate()` itself, and capture its `deps=` attribute to
# automatically create these Bazel library targets. this approach may become
# meaningful once we want to generate legacy documentation for all the toolchains
# at once, as those toolchains will also have to export their Bazel libraries
# to make that convenient.
bzl_library(
    name = "nixpkgs",
    srcs = [
        "nixpkgs.bzl",
        "util.bzl",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":bazel_tools",
        "@bazel_skylib//lib:paths",
    ],
)

generate(
    name = "README.md",
    input = "//:nixpkgs.bzl",
    symbol_names = [
        "nixpkgs_git_repository",
        "nixpkgs_local_repository",
        "nixpkgs_package",
    ],
    deps = ["//:nixpkgs"],
)
